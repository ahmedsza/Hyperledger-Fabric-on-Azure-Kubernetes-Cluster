parameters:
# environment
- name: deployEnvironment
  displayName: The environment which we are deploying to
  type: string
- name: serviceConnectionName
  displayName: Service connection to use
  type: string
- name: adminProfileKeyVaultServiceConnectionName
  displayName: Service connection to use with KeyVault
  type: string

# Swtiches to control deployment options
- name: deployResources
  displayName: Deploy Resources for Orderer and Peer
  type: boolean
  default: false
- name: createConsortium
  displayName: Create the consortium
  type: boolean
  default: false
- name: createChannelAndJoin
  displayName: Create the channel and join
  type: boolean
  default: false
- name: runNpmAudit
  displayName: Run NPM Audit
  type: boolean
  default: false
- name: aksVersion 
  displayName: AKS Version
  type: string
  default: '1.21.7'

# Switches to control deployment individual chaincodes

- name: deployTestChaincode 
  displayName: Deploy the chaincode (Test)
  type: boolean
  default: false

  # NOTE: All the variables used are listed below. Please keep this list up to date. They get injected from outside (i.e. variable group or pipeline using the template)

  ######## SPN and Subscription ##########
  # serviceConnection: comes-from-variable-group
  # hlfSubscription: comes-from-variable-group  

  ####### Blob Storage for temporary storage of build artefacts ########
  # tempArtefactBlobName: comes-from-variable-group # note: this need to be created prior
  # tempArtefactBlobStorageKey: comes-from-variable-group  #might not be needed, extract it at runtime
  # tempArtefactBlobContainerName: comes-from-variable-group # note: this need to be created prior
  
  ####### Blob Storage for saving generated orderer and peer profile ########
  # profileBlobStorageResourceGroup: comes-from-variable-group # note: this need to be created prior
  # profileBlobName: comes-from-variable-group # note: this need to be created prior
  # profileBlobStorageFileShare: comes-from-variable-group

  ######## ACR ############
  # dockerId: comes-from-variable-group 
  # dockerUsername: comes-from-variable-group  
  # dockerPwd: comes-from-variable-group 
  # dockerImage: comes-from-variable-group
  
  ######## Key Vault ##########
  # adminProfileKeyVaultName: comes-from-variable-group. This is where the connection profile will be saved so apps can use it.
  # chaincodePackageIdStorageKeyVaultName: comes-from-variable-group. This is where the deployed packaged id will be stored.  

  ######## HLF specific #########
  # hlfRegion: comes-from-variable-group 
  # hlfUserName: comes-from-variable-group 
  # hlfCaPassword: comes-from-variable-group 
  # hlfAksClusterPeer: comes-from-variable-group 
  # hlfAksClusterOrderer: comes-from-variable-group 
  # hlfOrdererResourceGroup: comes-from-variable-group 
  # hlfPeerResourceGroup: comes-from-variable-group 
  # hlfOrdererOrganization: comes-from-variable-group  
  # hlfPeerOrganization: comes-from-variable-group 
  # hlfChannelName: comes-from-variable-group 
  # hlfNetworkName: comes-from-variable-group 
  # hlfContextName: comes-from-variable-group 
  # hlfTDeployToolingRootFolder: comes-from-parent-pipepine

  ######## shared chaincode settings ########
  # chaincodeRootFolder: comes-from-parent-pipepine
  # chaincodeSupportEmail: comes-from-parent-pipepine
  # chaincodeCertificateCountry: comes-from-parent-pipepine
  # chaincodeCertificateState: comes-from-parent-pipepine
  # chaincodeCertificateLocality: comes-from-parent-pipepine
  # chaincodeCertificateOrganisation: comes-from-parent-pipepine
  # chaincodeCertificateName: comes-from-parent-pipepine
  # chaincodeCertificateKeyName: comes-from-parent-pipepine 
  # adminProfileSecretName: comes-from-parent-pipepine
  # chaincodeSecretNamePrefix: comes-from-parent-pipepine 

  ######## Individual chaincode settings ########
  ######## Test Chaincode ###########
  # testChainCodeFolder: comes-from-parent-pipepine
  # testChainCodeUniqueName: comes-from-parent-pipepine
  # testChainCodeUniqueLabel: comes-from-parent-pipepine
  # testChainCodeVersion: comes-from-variable-group 
  # testChainCodeSequence: comes-from-variable-group 
  # testChainCodeComponentName: comes-from-parent-pipepine
  # testChainCodeUniqueNamespace: comes-from-parent-pipepine
  # testChainCodePort: comes-from-parent-pipepine

jobs:
- deployment: GenerateImagesAndArtefacts
  displayName: Generate Images And Artefacts
  condition: and(succeeded(), eq('${{ parameters.deployResources }}', 'true'))
  environment: ${{ parameters.deployEnvironment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self 
        - task: Bash@3
          enabled: true
          displayName: Installing pre-requisites          
          inputs:
            targetType: 'inline'
            failOnStandardError: true
            script: |
              sudo apt-get install zip
              sudo apt-get install -y tar
              sudo apt-get install -y libtool
              sudo apt-get install -y npm

        - task: Bash@3
          enabled: true
          displayName: Generating artifacts and images
          inputs:      
            workingDirectory: "$(hlfTDeployToolingRootFolder)/scripts/"
            targetType: 'filePath'
            filePath: '$(hlfTDeployToolingRootFolder)/scripts/generateArtifacts.sh'
            arguments: "$(dockerId).azurecr.io/$(dockerImage)"
            failOnStderr: false

        - task: Bash@3 # todo: use a Azure Pipeline Docker@2 task rather than using docker login
          enabled: true
          displayName: Pushing images to ACR and artifacts to blob container
          inputs:      
            targetType: 'inline'
            failOnStandardError: true
            script: | 
              echo "Pushing images to ACR"     
              docker login -u $(dockerUsername) -p $(dockerPwd) $(dockerId).azurecr.io
              docker images
              docker push $(dockerId).azurecr.io/$(dockerImage)

              export STORAGE_ACCOUNT=$(tempArtefactBlobName)
              export STORAGE_RESOURCE_GROUP=$(profileBlobStorageResourceGroup)
              export CONTAINER_NAME=$(tempArtefactBlobContainerName)
              export STORAGE_KEY=$(az storage account keys list --resource-group $STORAGE_RESOURCE_GROUP --account-name $STORAGE_ACCOUNT --query "[0].value" | tr -d '"')
              echo "Pushing artifacts to blob container"  
              az storage blob upload --account-name $(tempArtefactBlobName) --container-name $(tempArtefactBlobContainerName) --file $(hlfTDeployToolingRootFolder)/out/hlf-marketplace.zip --name hlf-marketplace.zip --account-key $(STORAGE_KEY)  --overwrite
              az storage blob upload --account-name $(tempArtefactBlobName) --container-name $(tempArtefactBlobContainerName) --file $(hlfTDeployToolingRootFolder)/out/artifacts/funcNodeJS.zip --name artifacts/funcNodeJS.zip --account-key $(STORAGE_KEY) --overwrite
              az storage blob upload --account-name $(tempArtefactBlobName) --container-name $(tempArtefactBlobContainerName) --file $(hlfTDeployToolingRootFolder)/out/nestedtemplates/publicIpTemplate.json --name nestedtemplates/publicIpTemplate.json --account-key $(STORAGE_KEY)   --overwrite
              az storage blob upload --account-name $(tempArtefactBlobName) --container-name $(tempArtefactBlobContainerName) --file $(hlfTDeployToolingRootFolder)/out/mainTemplate.json --name mainTemplate.json --account-key $(STORAGE_KEY) --overwrite
    
  
- deployment: CreateOrdererandPeer
  displayName: 'Create Orderer and Peer deployment plan'
  dependsOn: GenerateImagesAndArtefacts
  condition: and(succeeded(), eq('${{ parameters.deployResources }}', 'true'))  
  environment: ${{ parameters.deployEnvironment }}
  timeoutInMinutes: 120
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self 
        - task: AzureCLI@2      
          enabled: true
          displayName: Ordererer resource groups and it's deployments          
          timeoutInMinutes: 60
          inputs:
            azureSubscription: ${{ parameters.serviceConnectionName }}
            scriptType: bash
            addSpnToEnvironment: true
            failOnStandardError: false # set to false as this can return stderr
            scriptLocation: inlineScript
            inlineScript: |
              az login --service-principal --username $servicePrincipalId --password $servicePrincipalKey --tenant $tenantId
              az account set --subscription $(hlfSubscription)

              echo "Creating Orderer resource group and it's components..."
              az group create -l $(hlfRegion) -n $(hlfOrdererResourceGroup)
              export STORAGE_ACCOUNT=$(profileBlobName)
              export STORAGE_RESOURCE_GROUP=$(profileBlobStorageResourceGroup)
              export CONTAINER_NAME=$(tempArtefactBlobContainerName)
              export STORAGE_KEY=$(az storage account keys list --resource-group $STORAGE_RESOURCE_GROUP --account-name $STORAGE_ACCOUNT --query "[0].value" | tr -d '"')

              export SAS_TOKEN=$(az storage account generate-sas --account-key $STORAGE_KEY --account-name $STORAGE_ACCOUNT  --expiry `date -u -d "1 day" '+%Y-%m-%dT%H:%MZ'` --https-only --permissions lruwd  --resource-types sco --services bfqt | tr -d '"')

              az deployment group create --name hlf-main-orderer --resource-group $(hlfOrdererResourceGroup) --template-uri https://$(tempArtefactBlobName).blob.core.windows.net/$(tempArtefactBlobContainerName)/mainTemplate.json?$SAS_TOKEN --parameter resourcePrefix='order-' hlfOrgName=$(hlfOrdererOrganization) clusterName=$(hlfAksClusterOrderer) dnsPrefix='orderer' agentCount='3' servicePrincipalClientId=$servicePrincipalId servicePrincipalClientSecret=$servicePrincipalKey hlfUserName=$(hlfUserName) hlfCaPswd=$(hlfCaPassword) kubernetesVersion=${{ parameters.aksVersion }} _artifactsLocationSasToken=?$SAS_TOKEN


        - task: AzureCLI@2
          enabled: true
          displayName: Peer resource groups and it's deployments
          timeoutInMinutes: 60
          inputs:
            azureSubscription: ${{ parameters.serviceConnectionName }}
            scriptType: bash
            addSpnToEnvironment: true
            failOnStandardError: false # set to false as this can return stderr
            scriptLocation: inlineScript
            inlineScript: |
              az login --service-principal --username $servicePrincipalId --password $servicePrincipalKey --tenant $tenantId
              az account set --subscription $(hlfSubscription)

              echo "Creating Peer resource group and it's components..."
              az group create -l $(hlfRegion) -n $(hlfPeerResourceGroup)            

                export STORAGE_ACCOUNT=$(profileBlobName)
              export STORAGE_RESOURCE_GROUP=$(profileBlobStorageResourceGroup)
              export CONTAINER_NAME=$(tempArtefactBlobContainerName)
              export STORAGE_KEY=$(az storage account keys list --resource-group $STORAGE_RESOURCE_GROUP --account-name $STORAGE_ACCOUNT --query "[0].value" | tr -d '"')

              export SAS_TOKEN=$(az storage account generate-sas --account-key $STORAGE_KEY --account-name $STORAGE_ACCOUNT  --expiry `date -u -d "1 day" '+%Y-%m-%dT%H:%MZ'` --https-only --permissions lruwd  --resource-types sco --services bfqt | tr -d '"')

              az deployment group create --name hlf-main-peer --resource-group $(hlfPeerResourceGroup) --template-uri https://$(tempArtefactBlobName).blob.core.windows.net/$(tempArtefactBlobContainerName)/mainTemplate.json?$SAS_TOKEN --parameter resourcePrefix='peer-' hlfOrgName=$(hlfPeerOrganization) clusterName=$(hlfAksClusterPeer) dnsPrefix='peer' agentCount='3' servicePrincipalClientId=$servicePrincipalId servicePrincipalClientSecret=$servicePrincipalKey hlfUserName=$(hlfUserName) hlfCaPswd=$(hlfCaPassword) kubernetesVersion=${{ parameters.aksVersion }} hlfMemberType='peer' _artifactsLocationSasToken=?$SAS_TOKEN

- deployment: CreateProfiles
  displayName: 'Create Profiles, Consortium, Setup Fabric CLI, Channel and chaincode operations'
  dependsOn: CreateOrdererandPeer
  condition: in(dependencies.CreateOrdererandPeer.result, 'Succeeded', 'Skipped')
  environment: ${{ parameters.deployEnvironment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self       
        - task: AzureCLI@2
          enabled: true
          displayName: Creating profiles for orderer and peer
          inputs:
            azureSubscription: ${{ parameters.serviceConnectionName }}
            scriptType: bash
            addSpnToEnvironment: true
            failOnStandardError: false # required as the output gets detected as stderr even if not actually error
            scriptLocation: inlineScript
            inlineScript: |
              az login --service-principal --username $servicePrincipalId --password $servicePrincipalKey --tenant $tenantId
              az account set --subscription $(hlfSubscription)

              echo "Setting execute permissions for shell script getConnector.sh:"
              sudo chmod +x $(hlfTDeployToolingRootFolder)/application/getConnector.sh

              echo "getConnector.sh output for Orderer:"
              $(hlfTDeployToolingRootFolder)/application/getConnector.sh $(hlfOrdererResourceGroup)

              echo "getConnector.sh output for Peer:"
              $(hlfTDeployToolingRootFolder)/application/getConnector.sh $(hlfPeerResourceGroup)

              echo "Creating Profile folder..."
              mkdir -m 777 $(hlfTDeployToolingRootFolder)/application/profile

              echo "Creating Orderer Profiles"
              $(hlfTDeployToolingRootFolder)/application/getConnector.sh $(hlfOrdererResourceGroup) | sed -e "s/{action}/gateway/g"| xargs curl > $(hlfTDeployToolingRootFolder)/application/profile/$(hlfOrdererOrganization)-ccp.json
              $(hlfTDeployToolingRootFolder)/application/getConnector.sh $(hlfOrdererResourceGroup) | sed -e "s/{action}/admin/g"| xargs curl > $(hlfTDeployToolingRootFolder)/application/profile/$(hlfOrdererOrganization)-admin.json
              $(hlfTDeployToolingRootFolder)/application/getConnector.sh $(hlfOrdererResourceGroup) | sed -e "s/{action}/msp/g"| xargs curl > $(hlfTDeployToolingRootFolder)/application/profile/$(hlfOrdererOrganization)-msp.json

              echo "Orderer CCP profile:"
              while IFS= read -r line; do
                  echo "$line"
              done < $(hlfTDeployToolingRootFolder)/application/profile/$(hlfOrdererOrganization)-ccp.json
              # todo: az keyvault secret set --name $(hlfOrdererOrganization)-ccp.json --vault-name MyKeyVault --value (<$(hlfOrdererOrganization)-ccp.json)

              echo "Orderer Admin profile:"
              while IFS= read -r line; do
                  echo "$line"
              done < $(hlfTDeployToolingRootFolder)/application/profile/$(hlfOrdererOrganization)-admin.json
              # todo: az keyvault secret set --name $(hlfOrdererOrganization)-ccp.json --vault-name MyKeyVault --value (<$(hlfOrdererOrganization)-admin.json)

              echo "Orderer MSP profile:"
              while IFS= read -r line; do
                  echo "$line"
              done < $(hlfTDeployToolingRootFolder)/application/profile/$(hlfOrdererOrganization)-msp.json
              # todo: az keyvault secret set --name $(hlfOrdererOrganization)-ccp.json --vault-name MyKeyVault --value (<$(hlfOrdererOrganization)-msp.json)

              echo "Creating Peer Profiles"
              $(hlfTDeployToolingRootFolder)/application/getConnector.sh $(hlfPeerResourceGroup) | sed -e "s/{action}/gateway/g"| xargs curl > $(hlfTDeployToolingRootFolder)/application/profile/$(hlfPeerOrganization)-ccp.json
              $(hlfTDeployToolingRootFolder)/application/getConnector.sh $(hlfPeerResourceGroup) | sed -e "s/{action}/admin/g"| xargs curl > $(hlfTDeployToolingRootFolder)/application/profile/$(hlfPeerOrganization)-admin.json
              $(hlfTDeployToolingRootFolder)/application/getConnector.sh $(hlfPeerResourceGroup) | sed -e "s/{action}/msp/g"| xargs curl > $(hlfTDeployToolingRootFolder)/application/profile/$(hlfPeerOrganization)-msp.json

              echo "Peer Connection profile:"
              while IFS= read -r line; do
                  echo "$line"
              done < $(hlfTDeployToolingRootFolder)/application/profile/$(hlfPeerOrganization)-ccp.json
              # todo: az keyvault secret set --name $(hlfOrdererOrganization)-ccp.json --vault-name MyKeyVault --value (<$(hlfPeerOrganization)-ccp.json)

              echo "Peer Admin profile:"
              while IFS= read -r line; do
                  echo "$line"
              done < $(hlfTDeployToolingRootFolder)/application/profile/$(hlfPeerOrganization)-admin.json
              # todo: az keyvault secret set --name $(hlfOrdererOrganization)-ccp.json --vault-name MyKeyVault --value (<$(hlfPeerOrganization)-admin.json)

              echo "Peer MSP profile:"
              while IFS= read -r line; do
                  echo "$line"
              done < $(hlfTDeployToolingRootFolder)/application/profile/$(hlfPeerOrganization)-msp.json
              # todo: az keyvault secret set --name $(hlfOrdererOrganization)-ccp.json --vault-name MyKeyVault --value (<$(hlfPeerOrganization)-msp.json)

        - task: AzureCLI@2
          enabled: true
          displayName: Saving peer profiles to Keyvault
          inputs:
            azureSubscription: ${{ parameters.adminProfileKeyVaultServiceConnectionName }}
            scriptType: pscore
            addSpnToEnvironment: true
            failOnStandardError: false # required as the output gets detected as stderr even if not actually error
            scriptLocation: inlineScript
            inlineScript: |
              cd $(hlfTDeployToolingRootFolder)/application/profile/

              $peerAdminProfile = get-content "$(hlfTDeployToolingRootFolder)/application/profile/$(hlfPeerOrganization)-admin.json"
              $peerConnectionProfile = Get-Content "$(hlfTDeployToolingRootFolder)/application/profile/$(hlfPeerOrganization)-ccp.json"

              $PeerProfileObject = @"
              {
              "adminProfile":$peerAdminProfile,
              "connectionProfile": $peerConnectionProfile
              }
              "@ | out-file -filepath kv_secret.txt

              az keyvault secret set --vault-name "$(adminProfileKeyVaultName)"  --name "$(adminProfileSecretName)" --file kv_secret.txt

        - task: Npm@1
          enabled: true
          displayName: Install NPM (azhlfTool)
          inputs:
            command: 'install'
            verbose: true
            workingDir: $(hlfTDeployToolingRootFolder)/azhlfTool

        - task: Npm@1
          enabled: true
          displayName: NPM Audit (azhlfTool)
          condition: and(succeeded(), eq('${{ parameters.runNpmAudit }}', 'true'))
          inputs:
            command: 'custom'
            customCommand: 'audit --audit-level=high --registry=https://registry.npmjs.org/'
            verbose: true
            workingDir: $(hlfTDeployToolingRootFolder)/azhlfTool

        - task: Npm@1
          enabled: true
          displayName: NPM Setup (azhlfTool)
          inputs:
            command: 'custom'
            customCommand: 'run setup:linux'
            verbose: true
            workingDir: $(hlfTDeployToolingRootFolder)/azhlfTool

        - task: AzureCLI@2
          enabled: true
          displayName: Creating Consortium
          condition: and(succeeded(), eq('${{ parameters.createConsortium }}', 'true'))
          inputs:
            azureSubscription: ${{ parameters.serviceConnectionName }}
            scriptType: bash
            failOnStandardError: true
            addSpnToEnvironment: true
            scriptLocation: inlineScript
            inlineScript: |
              sudo az login --service-principal --username $servicePrincipalId --password $servicePrincipalKey --tenant $tenantId  
              sudo az account set --subscription $(hlfSubscription)

              cd $(hlfTDeployToolingRootFolder)/azhlfTool
               
              echo "Setting up variables"

              # Set environment variables for the orderer organization's client
              export ORDERER_ORG_SUBSCRIPTION=$(hlfSubscription)
              export ORDERER_ORG_RESOURCE_GROUP=$(hlfOrdererResourceGroup)
              export ORDERER_ORG_NAME=$(hlfOrdererOrganization)
              export ORDERER_ADMIN_IDENTITY="admin.$ORDERER_ORG_NAME"
              export CHANNEL_NAME=$(hlfChannelName)

              # Set environment variables for the peer organization's client
              export PEER_ORG_SUBSCRIPTION=$(hlfSubscription)
              export PEER_ORG_RESOURCE_GROUP=$(hlfPeerResourceGroup)
              export PEER_ORG_NAME=$(hlfPeerOrganization)
              export PEER_ADMIN_IDENTITY="admin.$PEER_ORG_NAME"

              # Set environment variables for an Azure storage account
              export STORAGE_SUBSCRIPTION=$(hlfSubscription)
              export STORAGE_RESOURCE_GROUP=$(profileBlobStorageResourceGroup)
              export STORAGE_ACCOUNT=$(profileBlobName)
              export STORAGE_FILE_SHARE=$(profileBlobStorageFileShare)
              
              echo "--------- env variables-----------"
              echo "ORDERER_ORG_SUBSCRIPTION:$ORDERER_ORG_SUBSCRIPTION"
              echo "ORDERER_ORG_RESOURCE_GROUP:$ORDERER_ORG_RESOURCE_GROUP"
              echo "ORDERER_ORG_NAME:$ORDERER_ORG_NAME"
              echo "ORDERER_ADMIN_IDENTITY:$ORDERER_ADMIN_IDENTITY"
              echo "CHANNEL_NAME:$CHANNEL_NAME"
              echo "PEER_ORG_SUBSCRIPTION:$PEER_ORG_SUBSCRIPTION"
              echo "PEER_ORG_RESOURCE_GROUP:$PEER_ORG_RESOURCE_GROUP"
              echo "PEER_ADMIN_IDENTITY:$PEER_ADMIN_IDENTITY"
              echo "STORAGE_SUBSCRIPTION:$STORAGE_SUBSCRIPTION"
              echo "STORAGE_RESOURCE_GROUP:$STORAGE_RESOURCE_GROUP"
              echo "STORAGE_ACCOUNT:$STORAGE_ACCOUNT"
              echo "STORAGE_FILE_SHARE:$STORAGE_FILE_SHARE"
               echo "------------------------------"






              echo "Creating fileshare"
              export STORAGE_KEY=$(az storage account keys list --resource-group $STORAGE_RESOURCE_GROUP --account-name $STORAGE_ACCOUNT --query "[0].value" | tr -d '"')
              az storage share create --account-name $STORAGE_ACCOUNT --account-key $STORAGE_KEY --name $STORAGE_FILE_SHARE

              echo "Creating fileshare connection string"
              export SAS_TOKEN=$(az storage account generate-sas --account-key $STORAGE_KEY --account-name $STORAGE_ACCOUNT --expiry `date -u -d "1 day" '+%Y-%m-%dT%H:%MZ'` --https-only --permissions lruwd --resource-types sco --services f | tr -d '"')
              export AZURE_FILE_CONNECTION_STRING=https://$STORAGE_ACCOUNT.file.core.windows.net/$STORAGE_FILE_SHARE?$SAS_TOKEN

              # For the orderer organization:
              echo "adminProfile"
            

              sudo ./azhlf adminProfile import fromAzure -o $ORDERER_ORG_NAME -g $ORDERER_ORG_RESOURCE_GROUP -s $ORDERER_ORG_SUBSCRIPTION
                echo "connectionProfile"
              sudo ./azhlf connectionProfile import fromAzure -g $ORDERER_ORG_RESOURCE_GROUP -s $ORDERER_ORG_SUBSCRIPTION -o $ORDERER_ORG_NAME
              
              echo "msp import"
              sudo ./azhlf msp import fromAzure -g $ORDERER_ORG_RESOURCE_GROUP -s $ORDERER_ORG_SUBSCRIPTION -o $ORDERER_ORG_NAME

              # For the peer organization:
              echo "adminProfile"
              sudo ./azhlf adminProfile import fromAzure -g $PEER_ORG_RESOURCE_GROUP -s $PEER_ORG_SUBSCRIPTION -o $PEER_ORG_NAME
              
              echo "connection profile"
              sudo ./azhlf connectionProfile import fromAzure -g $PEER_ORG_RESOURCE_GROUP -s $PEER_ORG_SUBSCRIPTION -o $PEER_ORG_NAME
              
              echo "peer org msp import"
              sudo ./azhlf msp import fromAzure -g $PEER_ORG_RESOURCE_GROUP -s $PEER_ORG_SUBSCRIPTION -o $PEER_ORG_NAME

              # Add a peer organization for consortium management
              echo "msp export add peer"
              sudo ./azhlf msp export toAzureStorage -f $AZURE_FILE_CONNECTION_STRING -o $PEER_ORG_NAME
              echo "msp import -  add peer"
              sudo ./azhlf msp import fromAzureStorage -o $PEER_ORG_NAME -f $AZURE_FILE_CONNECTION_STRING
              echo "msp msp import add peer"
              echo "consortium join -o $ORDERER_ORG_NAME -u $ORDERER_ADMIN_IDENTITY -p $PEER_ORG_NAME"
              sudo ./azhlf consortium join -o $ORDERER_ORG_NAME -u $ORDERER_ADMIN_IDENTITY -p $PEER_ORG_NAME

        - task: AzureCLI@2
          displayName: Clone Fabric CLI Repo
          inputs:
            azureSubscription: ${{ parameters.serviceConnectionName }}
            scriptType: bash
            failOnStandardError: false
            addSpnToEnvironment: true
            scriptLocation: inlineScript
            inlineScript: |
              sudo az login --service-principal --username $servicePrincipalId --password $servicePrincipalKey --tenant $tenantId  
              sudo az account set --subscription $(hlfSubscription)

              echo "Cloning git repo of fabric cli"
              cd $(hlfTDeployToolingRootFolder)/
              git clone https://github.com/hyperledger/fabric-cli.git
              
              # checkout commit we know works
              cd fabric-cli
              git checkout f699625b6781789d1422ceb00b2bf56c42df5ba1

        - task: AzureCLI@2
          displayName: Setup Fabric CLI
          inputs:
            azureSubscription: ${{ parameters.serviceConnectionName }}
            scriptType: bash
            failOnStandardError: false
            addSpnToEnvironment: true
            scriptLocation: inlineScript
            inlineScript: |
              sudo az login --service-principal --username $servicePrincipalId --password $servicePrincipalKey --tenant $tenantId  
              sudo az account set --subscription $(hlfSubscription)

              echo "Setting permission for certgen.sh"
              sudo chmod +x $(hlfTDeployToolingRootFolder)/setupFabricCli/certgen.sh 

              echo "Generate crypto materials for peer organization"
              export Peer_Connection_Profile_Path=$(hlfTDeployToolingRootFolder)/application/profile/$(hlfPeerOrganization)-ccp.json
              export Peer_Admin_Profile_Path=$(hlfTDeployToolingRootFolder)/application/profile/$(hlfPeerOrganization)-admin.json
              export Peer_Msp_Profile_Path=$(hlfTDeployToolingRootFolder)/application/profile/$(hlfPeerOrganization)-msp.json

              cd $(hlfTDeployToolingRootFolder)/setupFabricCli/
              ./certgen.sh peer $Peer_Admin_Profile_Path $Peer_Connection_Profile_Path $Peer_Msp_Profile_Path

              echo "Generate crypto materials for orderer organization"
              export Orderer_Connection_Profile_Path=$(hlfTDeployToolingRootFolder)/application/profile/$(hlfOrdererOrganization)-ccp.json
              export Orderer_Admin_Profile_Path=$(hlfTDeployToolingRootFolder)/application/profile/$(hlfOrdererOrganization)-admin.json
              export Orderer_Msp_Profile_Path=$(hlfTDeployToolingRootFolder)/application/profile/$(hlfOrdererOrganization)-msp.json
            
              cd $(hlfTDeployToolingRootFolder)/setupFabricCli/
              ./certgen.sh orderer $Orderer_Admin_Profile_Path $Orderer_Connection_Profile_Path $Orderer_Msp_Profile_Path

              export FABRIC_EXECUTABLE_PATH=$(hlfTDeployToolingRootFolder)/fabric-cli/bin/fabric
              export PEER_CONNECTION_PROFILE_PATH=$Peer_Connection_Profile_Path
              export ORDERER_CONNECTION_PROFILE_PATH=$Orderer_Connection_Profile_Path

              cd $(hlfTDeployToolingRootFolder)/setupFabricCli/genFabricCliGOConfig/main/
              go env -w GO111MODULE=auto
              sudo go version
              echo "Installing Go dependencies"
              sudo go get ./...
              echo "Building Go files"
              sudo go build -o ../../configCoversion
              cd ../../
              echo "Running configVersion"
              pwd
              ./configCoversion

              echo "Listing contents in $(hlfTDeployToolingRootFolder)/setupFabricCli/"
              cd $(hlfTDeployToolingRootFolder)/setupFabricCli/
              ls

              echo "Building Fabric CLI"
              cd $(hlfTDeployToolingRootFolder)/fabric-cli
              make

        - task: AzureCLI@2
          displayName: Creating and joing channel
          condition: and(succeeded(), eq('${{ parameters.createChannelAndJoin }}', 'true'))
          inputs:
            azureSubscription: ${{ parameters.serviceConnectionName }}
            scriptType: bash
            failOnStandardError: false
            addSpnToEnvironment: true
            scriptLocation: inlineScript
            inlineScript: |
              sudo az login --service-principal --username $servicePrincipalId --password $servicePrincipalKey --tenant $tenantId  
              sudo az account set --subscription $(hlfSubscription)

              export FABRIC_EXECUTABLE_PATH=$(hlfTDeployToolingRootFolder)/fabric-cli/bin/fabric

              echo "Calling Fabric CLI network"
              $FABRIC_EXECUTABLE_PATH network set $(hlfNetworkName) $(hlfTDeployToolingRootFolder)/setupFabricCli/$(hlfPeerOrganization)-config.yaml

              echo "Setting Fabric CLI context"
              export PEER_ORG_NAME=$(hlfPeerOrganization)
              export PEER_ADMIN_IDENTITY="admin.$PEER_ORG_NAME"

              $FABRIC_EXECUTABLE_PATH context set $(hlfContextName) --channel $(hlfChannelName) --network $(hlfNetworkName) --organization $(hlfPeerOrganization) --user $PEER_ADMIN_IDENTITY
              $FABRIC_EXECUTABLE_PATH context use $(hlfContextName)
              
              echo "Creating channel config"
              cd $(hlfTDeployToolingRootFolder)/setupFabricCli/
              curl https://raw.githubusercontent.com/hyperledger/fabric/master/scripts/bootstrap.sh | bash -s -- 2.2.0 -d -s
              cat tempConfigtx.yaml | sed -e "s/OrgName/$(hlfPeerOrganization)/g" > configtx.yaml
              bin/configtxgen -profile OrgsChannel -outputCreateChannelTx ./channel-artifacts/$(hlfChannelName).tx -channelID $(hlfChannelName)

              echo "Creating channel using Fabric CLI "
              $FABRIC_EXECUTABLE_PATH channel create $(hlfChannelName) ./channel-artifacts/$(hlfChannelName).tx

              echo "Pausing before joining channel"
              sleep 60

              echo "Joining channel using Fabric CLI"
              $FABRIC_EXECUTABLE_PATH channel join $(hlfChannelName)

        - task: AzureCLI@2
          displayName: "Chaincode (Test): Approve, Commit and Deploy"
          condition: and(succeeded(), eq('${{ parameters.deployTestChaincode }}', 'true'))
          inputs:
            azureSubscription: ${{ parameters.serviceConnectionName }}
            scriptType: bash
            failOnStandardError: false
            addSpnToEnvironment: true
            scriptLocation: inlineScript
            inlineScript: |
              deployingChainCodeUniqueName=$(testChainCodeUniqueName)
              deployingChainCodeFolder=$(testChainCodeFolder)
              deployingChainCodeUniqueLabel=$(testChainCodeUniqueLabel)
              deployingChainCodeVersion=$(testChainCodeVersion)
              deployingChainCodeSequence=$(testChainCodeSequence)
              deployingChainCodeComponentName=$(testChainCodeComponentName)
              deployingChainCodeUniqueNamespace=$(testChainCodeUniqueNamespace)
              deployingChainCodePort=$(testChainCodePort)
              buildId=$(Build.BuildId)

              echo "Setting execute permissions for shell script deployChaincode.sh:"
              sudo chmod +x $(chaincodeRootFolder)/deployChaincode.sh

              cd $(chaincodeRootFolder)
              ./deployChaincode.sh $(hlfSubscription) $servicePrincipalId $servicePrincipalKey $tenantId $(hlfTDeployToolingRootFolder) $(hlfNetworkName) $(hlfPeerOrganization) $(hlfContextName) $(hlfChannelName) $deployingChainCodeUniqueName $(chaincodeRootFolder) $deployingChainCodeFolder $deployingChainCodeUniqueLabel $deployingChainCodeVersion $deployingChainCodeSequence $deployingChainCodeComponentName $deployingChainCodeUniqueNamespace $deployingChainCodePort $(chaincodeSupportEmail) $(dockerId) $(dockerUsername) $(dockerPwd) $buildId $(hlfPeerResourceGroup) $(hlfAksClusterPeer) $(chaincodeCertificateName) $(chaincodeCertificateKeyName) $(chaincodeCertificateCountry) $(chaincodeCertificateState) $(chaincodeCertificateLocality) $(chaincodeCertificateOrganisation) $(chaincodeSecretNamePrefix) $(chaincodePackageIdStorageKeyVaultName)